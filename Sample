// Time Complexity : O(n)
// Space Complexity : Constant
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach

class Solution {
    public int search(int[] nums, int target) {
        int low=0,mid,high=nums.length-1;
        
        
        while(low<=high)
        {
            mid=low+(high-low)/2;
            if(nums[mid]==target)
            {
                return mid;
            }
           if(nums[low]<=nums[mid]) //checking the element lies in first half of thearray
            {
                {
                    if(target>=nums[low] && target<nums[mid])
                    {
                        high=mid-1;
                    }
                    else
                    {
                        low=mid+1;
                    }
                }
            }
          if(nums[mid]<=nums[high]) //checking if the elements lies in the second                                                    //sorted array
            {
                if(target>nums[mid] &&target<=nums[high])
                {
                    low=mid+1;
                }
                else
                {
                    high=mid-1;
                }
            }
          
        }
        return -1;
        
}
}
